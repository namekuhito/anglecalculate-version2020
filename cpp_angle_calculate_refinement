// OpenPose関節点データの読み込み、角度計算、結果画像の生成　//

#include "stdafx.h"

#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include <string>
#include <cmath>
#include <opencv2/opencv.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>

#include "picojson.h"
#include <fstream>
#include <iostream>
#include <cassert>
#include <time.h>
#include <stdio.h>
#include <math.h>

#define PI 3.14159

double calclate_deg(double x1, double x2, double x3, double y1, double y2, double y3);
void result_img(double x1, double x2, double x3, double y1, double y2, double y3);
int Hough(void);
int get_points(double P[75]);

using namespace std;
using namespace picojson;

string win_canny = "canny";
string win_calc = "parameter";
string win_result = "result";

double bed_line[4] = { 0 };
char fname[10];
int flag = 0;	//0:腰 1:膝 2:足

int main(int argc,char *argv[]) {
	double P[75] = { 0 };
	int i = 0,result = 0;
	double x,y;
	double angle,angle2;

	time_t now = time(NULL);
	struct tm nowtime;
	int year, month, day;
	int hour, minute, second;
	errno_t error;
	ostringstream oss;


	//現在時刻を表す文字列を画像名として、画像を保存
	time(&now);
	error = localtime_s(&nowtime, &now);

	year = (nowtime.tm_year + 1900) * 10000000000;
	month = (nowtime.tm_mon + 1) * 100000000;
	day = (nowtime.tm_mday * 1000000);
	hour = (nowtime.tm_hour * 10000);
	minute = (nowtime.tm_min * 100);
	second = nowtime.tm_sec;

	oss << year + month + day + hour + minute + second << flush;
	printf("%d", oss);




	if(argc != 2)
	{
		cout << "Error! This program needs [FilePath]_[Num].";
		return 0;
	}

	//引数をflagに格納
	flag = atoi(argv[1]);

	//検出点データの取得
	get_points(P);

	//引数から測定対象の関節を判断し、角度を計算する。
	switch (flag) {
	case 1:
		Hough();

		angle = (180.0 - calclate_deg(bed_line[2] + P[36] - bed_line[0], P[36], P[39], bed_line[3] + P[37] - bed_line[1], P[37], P[40]));
		//足が左右逆に検出された場合の対策
		angle2 = (180.0 - calclate_deg(bed_line[2] + P[27] - bed_line[0], P[27], P[30], bed_line[3] + P[28] - bed_line[1], P[28], P[31]));

		if (angle2 > angle){
			angle = angle2;
			result_img(bed_line[2] + P[27] - bed_line[0], P[27], P[30], bed_line[3] + P[28] - bed_line[1], P[28], P[31]);
		}
		else result_img(bed_line[2] + P[36] - bed_line[0], P[36], P[39], bed_line[3] + P[37] - bed_line[1], P[37], P[40]);
		break;

	case 2:
		angle = (180.0 - calclate_deg(P[36], P[39], P[42], P[37], P[40], P[43]));
		result_img(P[36], P[39], P[42], P[37], P[40], P[43]);
		break;

	case 3:
		angle= (90.0 - calclate_deg(P[57], P[63], P[39], P[58], P[64], P[40]));
		result_img(P[60], P[63], P[39], P[61], P[64], P[40]);
		break;
	case 6:
		angle = -(90.0 - calclate_deg(P[57], P[63], P[39], P[58], P[64], P[40]));
		result_img(P[60], P[63], P[39], P[61], P[64], P[40]);
		break;
	default:
		cout << "Error! Comands not found.";
		break;
	}
	cv::destroyAllWindows();

	result = (int)angle;
	return result;
}

//データの読み込み
int get_points(double Point[75])
{
	int n = 0;

	value root;
	{
		ifstream stream("C:\\openpose-build\\x64\\result_json_realtime\\001_keypoints.json");
		if (!stream.is_open()) return 1;

		stream >> root;
		assert(get_last_error().empty());
	}
	value::array people = root.get<object>()["people"].get<value::array>();
	value::array keypoints = people[0].get<object>()["pose_keypoints_2d"].get<value::array>();

	//Point[]にデータを順番に格納
	for (value item : keypoints) {
		Point[n] = item.get<double>();
		n++;
	}
	int i = 0;
	for (i = 0; i < 75; i++) {
		printf("%lf", Point[i]);
	}
	return 0;
}

//3点の座標値から、角度を計算する
double calclate_deg(double x1, double x2, double x3, double y1, double y2, double y3)
{
	double ax, ay, bx, by;
	double cosin, theta;

	//ここに補正処理追加//
	if (flag == 1)
	{
		x3 = x3 - 20.0;
	}
	else if (flag == 2)
	{
		y1 = y1 + 30.0;
		x2 = x2 + 30.0;
	}
	else if (flag == 3)
	{
		x1 = x1 + 20.0;
		//x2 = x2 + 15.0;
		//y2 = y2 - 15.0;
		x3 = x3 + 30.0;
		y3 = y3 - 60.0;
	}
	////////////////////

	ax = x1 - x2;
	ay = y1 - y2;
	bx = x3 - x2;
	by = y3 - y2;

	cosin = (ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by));
	theta = acos(cosin) * 180 / PI;

	return theta;
}

//3点の座標値から直線を描画し、結果画像を生成する
void result_img(double x1, double x2, double x3, double y1, double y2, double y3)
{
	time_t now = time(NULL);
	struct tm nowtime;
	int year, month, day;
	int hour, minute, second;
	errno_t error;
	ostringstream oss;

	cv::Mat resize_img1;

	//測定対象の画像はこのディレクトリにコピーされている
	cv::Mat img1 = cv::imread("C:\\openpose-build\\x64\\newmedia\\001.png", 1);

	if (!img1.data)
	{
		cout << "Picture is not exist." << endl;
	}
	else
	{
		cv::namedWindow("WINDOW", cv::WINDOW_AUTOSIZE);
		
		if (flag == 1 || flag == 2)	//股関節・膝関節を選択した際の直線描画処理
		{
			cv::line(img1, cv::Point((int)x1, (int)y1), cv::Point((int)x2, (int)y2), cv::Scalar(0, 0, 200), 12, 4);
			cv::line(img1, cv::Point((int)x2, (int)y2), cv::Point((int)x3, (int)y3), cv::Scalar(0, 255, 255), 12, 4);
			cv::line(img1, cv::Point((int)(x2 - (x1 - x2)), (int)(y2 - (y1 - y2))), cv::Point((int)x2, (int)y2), cv::Scalar(0, 0, 200), 12, 4);
		}
		if (flag == 3 || flag == 6)//足関節を選択した際の直線描画処理
		{
			double x, y;
			x = x2 + (y3 - y2);
			y = y2 - (x3 - x2);

			cv::line(img1, cv::Point((int)x1, (int)y1), cv::Point((int)x2, (int)y2), cv::Scalar(0, 255, 255), 12, 4);
			cv::line(img1, cv::Point((int)x2, (int)y2), cv::Point((int)x3, (int)y3), cv::Scalar(0, 0, 200), 12, 4);
			cv::line(img1, cv::Point((int)x2, (int)y2), cv::Point((int)x, (int)y), cv::Scalar(0 , 0 , 200), 12, 4);
		}

		//画像サイズを縮小
		cv::resize(img1, resize_img1, cv::Size(), 0.3, 0.3);

		//現在時刻を表す文字列を画像名として、画像を保存
		time(&now);
		error = localtime_s(&nowtime,&now);

		year	= (nowtime.tm_year + 1900) * 10000000000;
		month	= (nowtime.tm_mon + 1) * 100000000;
		day		= (nowtime.tm_mday * 1000000);
		hour	= (nowtime.tm_hour * 10000);
		minute	= (nowtime.tm_min * 100);
		second	= nowtime.tm_sec;

		oss << year + month + day + hour + minute + second << flush;
		printf("%d", oss);
		cv::imwrite("C:\\openpose-build\\x64\\result_picture\\"+oss.str()+".bmp",img1);
	}
}

//Hough直線変換によるベッド検出
int Hough(void)
{
	//処理に用いるパラメータ
	int Canny_th1 = 0;
	int Canny_th2 = 90;
	int Hough_th = 400;
	int minLength = 1000;
	int maxGap = 1000;

	int y_abs = 0,num;
	double abs_ave, near;
	double min = 2000;

	cv::Mat copy_img, canny_GRAY;
	cv::Mat img = cv::imread("C:\\openpose-build\\x64\\newmedia\\001.png", 1);
	if (!img.data)
	{
		cout << "画像が存在しません" << endl;
		return 1;
	}
	vector<cv::Vec4i> lines;

	img.copyTo(copy_img);

	cv::Canny(copy_img, canny_GRAY, Canny_th1, Canny_th2);	//Cannyエッジ検出
	cv::HoughLinesP(canny_GRAY, lines, 1, CV_PI / 180, Hough_th, minLength, maxGap);	//Hough直線検出

	//画像内の位置から直線の絞り込み
	for (size_t i = 0; i < lines.size(); i++){
		if ((lines[i][0] >= 0 && lines[i][0] <= 1200) && (lines[i][1] >= 1100 && lines[i][1] <= 1600)) {
			if ((lines[i][2] >= 2200 && lines[i][2] <= 3500) && (lines[i][3] >= 1100 && lines[i][3] <= 1600)) {
				y_abs += abs(lines[i][1] - lines[i][3]);
			}
		}
	}
	abs_ave = ((double)y_abs / (double)lines.size());

	//直線の傾き平均から直線の絞り込み
	for (size_t i = 0; i < lines.size(); i++){
		if ((lines[i][0] >= 0 && lines[i][0] <= 1200) && (lines[i][1] >= 1100 && lines[i][1] <= 1600)) {
			if ((lines[i][2] >= 2200 && lines[i][2] <= 3500) && (lines[i][3] >= 1100 && lines[i][3] <= 1600)) {
				near = abs(abs_ave - (double)(abs(lines[i][1] - lines[i][3])));
				if (near < min) {
					min = near;
					for (int j = 0; j < 4; j++) {
						bed_line[j] = lines[i][j];
						num = i;
					}
				}
			}
		}
	}
	return 0;
}
/*
// 20180906.cpp : Defines the entry point for the console application.
//
#include "stdafx.h"

#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include <string>
#include <cmath>
#include <opencv2/opencv.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>

#include "picojson.h"
#include <fstream>
#include <iostream>
#include <cassert>

#include <stdio.h>
#include <math.h>
//#define width  1304//3264	//x
//#define height 980//2448 //y
#define PI 3.141592
//int width,height;

int flag = 1;	//0:腰 1:膝 2:足

double calclate_deg(double x1, double x2, double x3, double y1, double y2, double y3);
void result_img(double x1, double x2, double x3, double y1, double y2, double y3);
int Hough(void);
int get_points(double P[75]);
void pose_estimate(void);

using namespace std;
using namespace picojson;

//std::string win_canny = "canny";
//std::string win_calc = "parameter";
//std::string win_result = "result";
string win_canny = "canny";
string win_calc = "parameter";
string win_result = "result";

string json = ("C:\\openpose-build\\x64\\result_json\\");
string image = ("C:\\openpose-build\\x64\\newmedia\\");

//cv::VideoCapture mov("C:\\openpose-build\\x64\\examples\\media\\video.avi");

double bed_line[4] = { 0 };
char fname[10];

int main(int argc, int* argv[]) {
	double P[75] = { 0 };
	int i = 0;
	double x, y;

	/*cv::Mat frames;

	while (cv::waitKey(1) != 13)
	{
	mov >> frames;
	if (frames.empty())
	{
	}
	else cv::imshow(win_result, frames);	//結果表示
	}*/
	//pose_estimate();
	//get_points(P);
/*
	while (flag != 0)
	{
		json = ("C:\\openpose-build\\x64\\result_json\\");
		image = ("C:\\openpose-build\\x64\\newmedia\\");

		printf("入力画像番号を選択 (終了する場合はend)>>");
		cin >> fname;
		if (!strcmp(fname, "end")) return 0;

		json += fname;
		json += "_keypoints.json";
		//cout << json << endl;

		image += fname;
		image += ".JPG";
		//cout << image <<endl;

		printf("関節を選択 (1：腰 2:膝 3：足)>>>");
		scanf_s("%d", &flag);

		//if (flag == 1) json = ("C:\\openpose-build\\x64\\result_json\\008_keypoints.json");
		//C:\\openpose-build\\x64\\result_json\\007_keypoints.json
		get_points(P);
		//cout << image << endl;
		switch (flag) {
		case 1:
			Hough();
			x = P[36] - bed_line[0];
			y = P[37] - bed_line[1];

			bed_line[2] = bed_line[2] + x;
			bed_line[3] = bed_line[3] + y;

			printf("\n股関節屈曲角度 ： %5.1lf 度\n\n", 180 - calclate_deg(bed_line[2], P[36], P[39], bed_line[3], P[37], P[40]));
			result_img(bed_line[2], P[36], P[39], bed_line[3], P[37], P[40]);
			//printf("%lf,%lf\n", P[39], P[40]);
			break;

		case 2:
			printf("\n膝関節屈曲角度 ： %5.1lf 度\n\n", 180 - calclate_deg(P[36], P[39], P[42], P[37], P[40], P[43]));
			result_img(P[36], P[39], P[42], P[37], P[40], P[43]);
			break;

		case 3:
			printf("\n足関節屈曲角度 ： %5.1lf 度\n\n", 90 - calclate_deg(P[57], P[63], P[39], P[58], P[64], P[40]));
			//printf("\nancle_deg = %lf\n\n", 90 - calclate_deg(P[57], P[42], P[39], P[58], P[43], P[40]));
			result_img(P[57], P[63], P[39], P[58], P[64], P[40]);
			break;
		default:
			printf("コマンドが存在しません\n");
			break;
		}
		cv::destroyAllWindows();
		printf("------------------------------------------------\n");
	}

	//printf("プログラムを終了します\n\n");
	return 0;
}

void pose_estimate(void)
{
	int ret = 0;
	FILE *fp = NULL;
	char *cmdline = "Release\\OpenPoseDemo.exe --image_dir newmedia --write_images result_image --write_json result_json";

	fp = _popen(cmdline, "w");
}

int get_points(double Point[75])
{
	int i = 0;

	value root;
	{
		//ifstream stream("image13_keypoints.json");
		//if (flag == 1) json = ("C:\\openpose-build\\x64\\result_json\\008_keypoints.json");
		//if (flag == 2) json = ("C:\\openpose-build\\x64\\result_json\\023_keypoints.json");
		//if (flag == 3) json = ("C:\\openpose-build\\x64\\result_json\\071_keypoints.json");
		ifstream stream(json);
		if (!stream.is_open()) return 1;

		stream >> root;
		assert(get_last_error().empty());
	}
	value::array people = root.get<object>()["people"].get<value::array>();
	value::array keypoints = people[0].get<object>()["pose_keypoints_2d"].get<value::array>();
	for (value item : keypoints) {
		Point[i] = item.get<double>();
		//cout << i << endl;
		//cout << P[i] << endl;
		i++;
	}
	return 0;
}

double calclate_deg(double x1, double x2, double x3, double y1, double y2, double y3)
{
	double ax, ay, bx, by;
	double calc, arccos;

	//y1 = height - y1;
	//y2 = height - y2;
	//y3 = height - y3;

	ax = x1 - x2;
	ay = y1 - y2;
	bx = x3 - x2;
	by = y3 - y2;

	//printf("a(%lf,%lf)\nb(%lf,%lf)\n", ax, ay, bx, by);

	calc = (ax*bx + ay * by) / (sqrt(ax*ax + ay * ay)*sqrt(bx*bx + by * by));
	arccos = acos(calc) * 180 / PI;

	//printf("ans=%lf\n", calc);
	//printf("acos=%lf\n", arccos);

	return arccos;
}

void result_img(double x1, double x2, double x3, double y1, double y2, double y3)
{
	cv::Mat resize_img1;
	//if (flag == 1) image = ("C:\\openpose-build\\x64\\newmedia\\008.JPG");
	//if (flag == 2) image = ("C:\\openpose-build\\x64\\newmedia\\023.JPG");
	//if (flag == 3) image = ("C:\\openpose-build\\x64\\newmedia\\071.JPG");
	cv::Mat img1 = cv::imread(image, 1);

	if (!img1.data)
	{
		cout << "画像が存在しません" << endl;
	}
	else
	{
		//width = img1.cols;
		//height = img1.rows;
		cv::namedWindow("WINDOW", cv::WINDOW_AUTOSIZE);

		if (flag == 1 || flag == 2)
		{
			cv::line(img1, cv::Point((int)x1, (int)y1), cv::Point((int)x2, (int)y2), cv::Scalar(0, 255, 0), 12, 4);
			cv::line(img1, cv::Point((int)x2, (int)y2), cv::Point((int)x3, (int)y3), cv::Scalar(0, 255, 255), 12, 4);
			cv::line(img1, cv::Point((int)(x2 - (x1 - x2)), (int)(y2 - (y1 - y2))), cv::Point((int)x2, (int)y2), cv::Scalar(0, 255, 0), 12, 4);
		}
		if (flag == 3)
		{
			//工事中！！！！
			cv::line(img1, cv::Point((int)x1, (int)y1), cv::Point((int)x2, (int)y2), cv::Scalar(0, 255, 255), 12, 4);
			cv::line(img1, cv::Point((int)x2, (int)y2), cv::Point((int)x3, (int)y3), cv::Scalar(0, 255, 0), 12, 4);
			double x, y;
			x = x2 + (y3 - y2);
			y = y2 - (x3 - x2);
			cv::line(img1, cv::Point((int)x2, (int)y2), cv::Point((int)x, (int)y), cv::Scalar(0, 255, 0), 12, 4);
		}
		cv::resize(img1, resize_img1, cv::Size(), 0.3, 0.3);

		while (cv::waitKey(1) != 13) {
			cv::imshow("WINDOW", resize_img1);//結果表示
		}
	}
}

//閾値トラックバー付きのHough直線変換
int Hough(void)
{
	int Canny_th1 = 0;
	int Canny_th2 = 255;
	int Hough_th = 220;
	int minLength = 1000;
	int maxGap = 1000;
	int y_abs;

	cv::Mat copy_img, cannyedge, c_canny, result, res_canny, res_result;
	cv::Mat img = cv::imread(image, 1);
	if (!img.data)
	{
		cout << "画像が存在しません" << endl;
		return 1;
	}
	//cv::Mat ir;
	//cv::resize(img, ir, cv::Size(), 0.2, 0.2);

	//cv::namedWindow(win_calc, cv::WINDOW_AUTOSIZE);
	//cv::imshow(win_calc, ir);

	cv::createTrackbar("Canny_th1", win_calc, &Canny_th1, 255);
	cv::createTrackbar("Canny_th2", win_calc, &Canny_th2, 255);
	cv::createTrackbar("Hough_th", win_calc, &Hough_th, 1000);
	cv::createTrackbar("minLength", win_calc, &minLength, 1000);
	cv::createTrackbar("maxGap", win_calc, &maxGap, 1000);

	//std::vector<cv::Vec4i> lines;
	vector<cv::Vec4i> lines;

	while (cv::waitKey(1) != 13)	//1を押すまでパラメータの調整
	{
		img.copyTo(copy_img);
		cv::imshow("background", copy_img);

		cv::Canny(copy_img, cannyedge, Canny_th1, Canny_th2);	//Cannyエッジ検出
		cv::cvtColor(cannyedge, c_canny, CV_GRAY2BGR);
		cv::HoughLinesP(cannyedge, lines, 1, CV_PI / 180, Hough_th, minLength, maxGap);	//Hough直線検出

		for (size_t i = 0; i < lines.size(); i++)
		{
			line(c_canny, cv::Point(lines[i][0], lines[i][1]),
				cv::Point(lines[i][2], lines[i][3]), cv::Scalar(0, 0, 255), 3, 8);
		}
		cv::resize(c_canny, res_canny, cv::Size(), 0.3, 0.3);
		cv::imshow(win_canny, res_canny);
	}

	cv::namedWindow(win_result, cv::WINDOW_AUTOSIZE);
	img.copyTo(result);

	for (size_t i = 0; i < lines.size(); i++)
	{
		if ((lines[i][0] >= 0 && lines[i][0] <= 1200) && (lines[i][1] >= 1100 && lines[i][1] <= 1600)) {
			if ((lines[i][2] >= 2200 && lines[i][2] <= 3500) && (lines[i][3] >= 1100 && lines[i][3] <= 1600)) {
				y_abs = abs(lines[i][1] - lines[i][3]);

				if (y_abs <= 10) {
					for (int j = 0; j < 4; j++) {
						bed_line[j] = lines[i][j];
						//printf("bed_line[%d]=%d\n", j, lines[i][j]);
					}
					//line(result, cv::Point(lines[i][0], lines[i][1]),cv::Point(lines[i][2], lines[i][3]), cv::Scalar(0, 255, 0), 5, 8);
				}
			}
		}

		//printf("%d,%d\n", lines[i][0], lines[i][1]);
		//printf("%d,%d\n\n", lines[i][2], lines[i][3]);

		//bed_line[0] = lines[i][0];
		//bed_line[1] = lines[i][1];
		//bed_line[2] = lines[i][2];
		//bed_line[3] = lines[i][3];	
	}

	while (cv::waitKey(1) != 13) {
		cv::resize(result, res_result, cv::Size(), 0.5, 0.5);
		cv::imshow(win_result, res_result);	//結果表示
	}
	//cv::destroyAllWindows();

	return 0;
}*/
